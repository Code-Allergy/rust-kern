#![allow(dead_code)]

pub mod base {
    pub const CM_PER_BASE: u32 = 0x44E00000;
    pub const CM_WKUP_BASE: u32 = 0x44E00400;
    pub const CONTROL_MODULE_BASE: u32 = 0x44E10000;
    pub const I2C_BASE_ADDR: u32 = 0x44E0_B000;
    pub const UART0_BASE: u32 = 0x44E09000;
    pub const DDR_PHY_CTRL_BASE: u32 = CONTROL_MODULE_BASE + 0x2000;
}

pub mod cm {
    pub const CONTROL_MODULE_CONF_UART0_RXD: u32 = 0x970;
    pub const CONTROL_MODULE_CONF_UART0_TXD: u32 = 0x974;

    /* Constants to configure MPU divider */
    pub const MPUPLL_N: u32 = 23;
    pub const MPUPLL_M2: u32 = 1;

    pub const COREPLL_M: u32 = 1000;
    pub const COREPLL_N: u32 = 23;
    pub const COREPLL_HSD_M4: u32 = 10;
    pub const COREPLL_HSD_M5: u32 = 8;
    pub const COREPLL_HSD_M6: u32 = 4;

    /* Setting the  PER PLL values at OPP100:
     ** OSCIN = 24MHz, Fdpll = 960MHz
     ** CLKLDO = 960MHz, CLKOUT = 192MHz
     */
    pub const PERPLL_M: u32 = 960;
    pub const PERPLL_N: u32 = 23;
    pub const PERPLL_M2: u32 = 5;
    pub const DDRPLL_N: u32 = 23;
    pub const DDRPLL_M2: u32 = 1;
    pub const DDRPLL_M_DDR3: u32 = 303;

    // CLKCTRL
    pub const CLKCTRL_IDLEST: u32 = 0x00030000;
    pub const CLKCTRL_IDLEST_SHIFT: u32 = 0x00000010;
    pub const CLKCTRL_IDLEST_DISABLE: u32 = 0x3;
    pub const CLKCTRL_IDLEST_FUNC: u32 = 0x0;
    pub const CLKCTRL_IDLEST_IDLE: u32 = 0x2;
    pub const CLKCTRL_IDLEST_TRANS: u32 = 0x1;

    pub const CLKCTRL_MODULEMODE: u32 = 0x00000003;
    pub const CLKCTRL_MODULEMODE_SHIFT: u32 = 0x00000000;
    pub const CLKCTRL_MODULEMODE_DISABLED: u32 = 0x0;
    pub const CLKCTRL_MODULEMODE_ENABLE: u32 = 0x2;
    pub const CLKCTRL_MODULEMODE_RESERVED: u32 = 0x3;
    pub const CLKCTRL_MODULEMODE_RESERVED_1: u32 = 0x1;

    /* L3_CLKSTCTRL */
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_CPTS_RFT_GCLK: u32 = 0x00000040;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_CPTS_RFT_GCLK_SHIFT: u32 = 0x00000006;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_CPTS_RFT_GCLK_ACT: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_CPTS_RFT_GCLK_INACT: u32 = 0x0;

    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_EMIF_GCLK: u32 = 0x00000004;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_EMIF_GCLK_SHIFT: u32 = 0x00000002;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_EMIF_GCLK_ACT: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_EMIF_GCLK_INACT: u32 = 0x0;

    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_L3_GCLK: u32 = 0x00000010;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_L3_GCLK_SHIFT: u32 = 0x00000004;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_L3_GCLK_ACT: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_L3_GCLK_INACT: u32 = 0x0;

    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MCASP_GCLK: u32 = 0x00000080;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MCASP_GCLK_SHIFT: u32 = 0x00000007;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MCASP_GCLK_ACT: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MCASP_GCLK_INACT: u32 = 0x0;

    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MMC_FCLK: u32 = 0x00000008;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MMC_FCLK_SHIFT: u32 = 0x00000003;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MMC_FCLK_ACT: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKACTIVITY_MMC_FCLK_INACT: u32 = 0x0;

    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL: u32 = 0x00000003;
    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL_SHIFT: u32 = 0x00000000;
    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL_HW_AUTO: u32 = 0x3;
    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL_NO_SLEEP: u32 = 0x0;
    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL_SW_SLEEP: u32 = 0x1;
    pub const CM_PER_L3_CLKSTCTRL_CLKTRCTRL_SW_WKUP: u32 = 0x2;

    pub const CLKTRCTRL: u32 = 0x00000003;
    pub const CLKTRCTRL_SHIFT: u32 = 0x00000000;
    pub const CLKTRCTRL_HW_AUTO: u32 = 0x3;
    pub const CLKTRCTRL_NO_SLEEP: u32 = 0x0;
    pub const CLKTRCTRL_SW_SLEEP: u32 = 0x1;
    pub const CLKTRCTRL_SW_WKUP: u32 = 0x2;

    pub const CM_PER_OCPWP_L3_CLKSTCTRL_CLKACTIVITY_OCPWP_L3_GCLK: u32 = 0x00000010;
    pub const CM_PER_L3S_CLKSTCTRL_CLKACTIVITY_L3S_GCLK: u32 = 0x00000008;

    pub const CM_WKUP_CLKSTCTRL_CLKACTIVITY_I2C0_GFCLK: u32 = 0x00000800;

    pub const CM_WKUP_CM_L3_AON_CLKSTCTRL_CLKACTIVITY_L3_AON_GCLK: u32 = 0x00000008;
    pub const CM_WKUP_CM_L3_AON_CLKSTCTRL_CLKACTIVITY_L3_AON_GCLK_SHIFT: u32 = 0x00000003;
    pub const CM_WKUP_CM_L3_AON_CLKSTCTRL_CLKACTIVITY_L3_AON_GCLK_ACT: u32 = 0x1;
    pub const CM_WKUP_CM_L3_AON_CLKSTCTRL_CLKACTIVITY_L3_AON_GCLK_INACT: u32 = 0x0;

    pub const CM_WKUP_CLKSTCTRL_CLKACTIVITY_L4_WKUP_GCLK: u32 = 0x00000004;
    pub const CM_WKUP_CLKSTCTRL_CLKACTIVITY_L4_WKUP_GCLK_SHIFT: u32 = 0x00000002;
    pub const CM_WKUP_CLKSTCTRL_CLKACTIVITY_L4_WKUP_GCLK_ACT: u32 = 0x1;
    pub const CM_WKUP_CLKSTCTRL_CLKACTIVITY_L4_WKUP_GCLK_INACT: u32 = 0x0;

    pub const CM_WKUP_CM_L4_WKUP_AON_CLKSTCTRL_CLKACTIVITY_L4_WKUP_AON_GCLK: u32 = 0x00000004;
    pub const CM_WKUP_CM_L4_WKUP_AON_CLKSTCTRL_CLKACTIVITY_L4_WKUP_AON_GCLK_SHIFT: u32 = 0x00000002;
    pub const CM_WKUP_CM_L4_WKUP_AON_CLKSTCTRL_CLKACTIVITY_L4_WKUP_AON_GCLK_ACT: u32 = 0x1;
    pub const CM_WKUP_CM_L4_WKUP_AON_CLKSTCTRL_CLKACTIVITY_L4_WKUP_AON_GCLK_INACT: u32 = 0x0;

    // pin muxing i2c
    pub const CONTROL_CONF_I2C0_SDA: u32 = 0x988;
    pub const CONTROL_CONF_I2C0_SCL: u32 = 0x98c;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_I2C0_SDA_CONF_I2C0_SDA_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_I2C0_SCL */
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_I2C0_SCL_CONF_I2C0_SCL_SLEWCTRL_SHIFT: u32 = 0x00000006;

    pub const CONTROL_DEVICE_ID: u32 = 0x600;
    pub const CONTROL_DEVICE_ID_DEVREV_SHIFT: u32 = 0x0000001C;

    pub const CONTROL_EFUSE_SMA: u32 = 0x7fc;

    pub const CM_CLKMODE_DPLL_MPU: u32 = 0x88;

    /* Wakeup regs */
    pub const CM_WKUP_CLKSTCTRL: u32 = 0x0;
    pub const CM_WKUP_CONTROL_CLKCTRL: u32 = 0x4;
    pub const CM_WKUP_GPIO0_CLKCTRL: u32 = 0x8;
    pub const CM_WKUP_L4WKUP_CLKCTRL: u32 = 0xc;
    pub const CM_WKUP_TIMER0_CLKCTRL: u32 = 0x10;
    pub const CM_WKUP_DEBUGSS_CLKCTRL: u32 = 0x14;
    pub const CM_WKUP_CM_L3_AON_CLKSTCTRL: u32 = 0x18;
    pub const CM_WKUP_CM_AUTOIDLE_DPLL_MPU: u32 = 0x1c;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU: u32 = 0x20;
    pub const CM_WKUP_CM_SSC_DELTAMSTEP_DPLL_MPU: u32 = 0x24;
    pub const CM_WKUP_CM_SSC_MODFREQDIV_DPLL_MPU: u32 = 0x28;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU: u32 = 0x2c;
    pub const CM_WKUP_CM_AUTOIDLE_DPLL_DDR: u32 = 0x30;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR: u32 = 0x34;
    pub const CM_WKUP_CM_SSC_DELTAMSTEP_DPLL_DDR: u32 = 0x38;
    pub const CM_WKUP_CM_SSC_MODFREQDIV_DPLL_DDR: u32 = 0x3c;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR: u32 = 0x40;
    pub const CM_WKUP_CM_AUTOIDLE_DPLL_DISP: u32 = 0x44;
    pub const CM_WKUP_CM_IDLEST_DPLL_DISP: u32 = 0x48;
    pub const CM_WKUP_CM_SSC_DELTAMSTEP_DPLL_DISP: u32 = 0x4c;
    pub const CM_WKUP_CM_SSC_MODFREQDIV_DPLL_DISP: u32 = 0x50;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DISP: u32 = 0x54;
    pub const CM_WKUP_CM_AUTOIDLE_DPLL_CORE: u32 = 0x58;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE: u32 = 0x5c;
    pub const CM_WKUP_CM_SSC_DELTAMSTEP_DPLL_CORE: u32 = 0x60;
    pub const CM_WKUP_CM_SSC_MODFREQDIV_DPLL_CORE: u32 = 0x64;
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE: u32 = 0x68;
    pub const CM_WKUP_CM_AUTOIDLE_DPLL_PER: u32 = 0x6c;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER: u32 = 0x70;
    pub const CM_WKUP_CM_SSC_DELTAMSTEP_DPLL_PER: u32 = 0x74;
    pub const CM_WKUP_CM_SSC_MODFREQDIV_DPLL_PER: u32 = 0x78;
    pub const CM_WKUP_CM_CLKDCOLDO_DPLL_PER: u32 = 0x7c;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE: u32 = 0x80;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE: u32 = 0x84;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU: u32 = 0x88;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER: u32 = 0x8c;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE: u32 = 0x90;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR: u32 = 0x94;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DISP: u32 = 0x98;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH: u32 = 0x9c;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR: u32 = 0xa0;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DISP: u32 = 0xa4;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU: u32 = 0xa8;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER: u32 = 0xac;
    pub const CM_WKUP_WKUP_M3_CLKCTRL: u32 = 0xb0;
    pub const CM_WKUP_UART0_CLKCTRL: u32 = 0xb4;
    pub const CM_WKUP_I2C0_CLKCTRL: u32 = 0xb8;
    pub const CM_WKUP_ADC_TSC_CLKCTRL: u32 = 0xbc;
    pub const CM_WKUP_SMARTREFLEX0_CLKCTRL: u32 = 0xc0;
    pub const CM_WKUP_TIMER1_CLKCTRL: u32 = 0xc4;
    pub const CM_WKUP_SMARTREFLEX1_CLKCTRL: u32 = 0xc8;
    pub const CM_WKUP_CM_L4_WKUP_AON_CLKSTCTRL: u32 = 0xcc;
    pub const CM_WKUP_WDT0_CLKCTRL: u32 = 0xd0;
    pub const CM_WKUP_WDT1_CLKCTRL: u32 = 0xd4;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE: u32 = 0xd8;

    /* CM_IDLEST_DPLL_MPU */
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_DPLL_CLK: u32 = 0x00000001;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_DPLL_CLK_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_DPLL_CLK_DPLL_LOCKED: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_DPLL_CLK_DPLL_UNLOCKED: u32 = 0x0;

    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_MN_BYPASS: u32 = 0x00000100;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_MN_BYPASS_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_MN_BYPASS_MN_BYPASS: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_MPU_ST_MN_BYPASS_NO_MNBYPASS: u32 = 0x0;

    /* CM_CLKMODE_DPLL_MPU */
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_DRIFTGUARD_EN: u32 = 0x00000100;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_DRIFTGUARD_EN_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_DRIFTGUARD_EN_DIASBLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_DRIFTGUARD_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN: u32 = 0x00000007;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_DPLL_FR_BYP_MODE: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_DPLL_LOCK_MODE: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_DPLL_LP_BYP_MODE: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_DPLL_MN_BYP_MODE: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_RESERVED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_RESERVED1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_RESERVED2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_EN_RESERVED3: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_LPMODE_EN: u32 = 0x00000400;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_LPMODE_EN_SHIFT: u32 = 0x0000000A;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_LPMODE_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_LPMODE_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL: u32 = 0x00000018;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL_SHIFT: u32 = 0x00000003;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL_RAMP_ALGO1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL_RAMP_ALGO2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL_RAMP_DISABLE: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_LEVEL_RESERVED: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE: u32 = 0x000000E0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_SHIFT: u32 = 0x00000005;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX128: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX16: u32 = 0x3;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX2: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX32: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX4: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX512: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX64: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RAMP_RATE_REFCLKX8: u32 = 0x2;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_REGM4XEN: u32 = 0x00000800;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_REGM4XEN_SHIFT: u32 = 0x0000000B;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_REGM4XEN_DISABLED: u32 = 0x0;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RELOCK_RAMP_EN: u32 = 0x00000200;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_RELOCK_RAMP_EN_SHIFT: u32 = 0x00000009;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_ACK: u32 = 0x00002000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_ACK_SHIFT: u32 = 0x0000000D;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_ACK_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_ACK_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_DOWNSPREAD: u32 = 0x00004000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_DOWNSPREAD_SHIFT: u32 = 0x0000000E;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_DOWNSPREAD_FULL_SPREAD: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_DOWNSPREAD_LOW_SPREAD: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_EN: u32 = 0x00001000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_EN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_TYPE: u32 = 0x00008000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_TYPE_SHIFT: u32 = 0x0000000F;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_TYPE_SQUARE: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_MPU_DPLL_SSC_TYPE_TRIANGULAR: u32 = 0x0;

    /* CM_CLKSEL_DPLL_MPU */
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_BYP_CLKSEL: u32 = 0x00800000;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_BYP_CLKSEL_SHIFT: u32 = 0x00000017;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_BYP_CLKSEL_SEL0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_BYP_CLKSEL_SEL1: u32 = 0x1;

    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_DIV: u32 = 0x0000007F;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_DIV_SHIFT: u32 = 0x00000000;

    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_MULT: u32 = 0x0007FF00;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_MULT_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_MULT_0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_MPU_DPLL_MULT_1: u32 = 0x1;

    /* CM_DIV_M2_DPLL_MPU */
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_DIV: u32 = 0x0000001F;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_DIVCHACK: u32 = 0x00000020;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_DIVCHACK_SHIFT: u32 = 0x00000005;

    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_DPLL_CLKOUT_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_ST_DPLL_CLKOUT: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_ST_DPLL_CLKOUT_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_ST_DPLL_CLKOUT_CLK_ENABLED: u32 = 0x1;
    pub const CM_WKUP_CM_DIV_M2_DPLL_MPU_ST_DPLL_CLKOUT_CLK_GATED: u32 = 0x0;

    /* CM_CLKMODE_DPLL_CORE */
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_DRIFTGUARD_EN: u32 = 0x00000100;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_DRIFTGUARD_EN_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_DRIFTGUARD_EN_DIASBLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_DRIFTGUARD_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN: u32 = 0x00000007;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_DPLL_FR_BYP_MODE: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_DPLL_LOCK_MODE: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_DPLL_LP_BYP_MODE: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_DPLL_MN_BYP_MODE: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_RESERVED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_RESERVED1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_RESERVED2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_EN_RESERVED3: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_LPMODE_EN: u32 = 0x00000400;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_LPMODE_EN_SHIFT: u32 = 0x0000000A;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_LPMODE_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_LPMODE_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL: u32 = 0x00000018;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL_SHIFT: u32 = 0x00000003;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL_RAMP_ALGO1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL_RAMP_ALGO2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL_RAMP_DISABLE: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_LEVEL_RESERVED: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE: u32 = 0x000000E0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_SHIFT: u32 = 0x00000005;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX128: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX16: u32 = 0x3;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX2: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX32: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX4: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX512: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX64: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RAMP_RATE_REFCLKX8: u32 = 0x2;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_REGM4XEN: u32 = 0x00000800;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_REGM4XEN_SHIFT: u32 = 0x0000000B;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_REGM4XEN_DISABLED: u32 = 0x0;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RELOCK_RAMP_EN: u32 = 0x00000200;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_RELOCK_RAMP_EN_SHIFT: u32 = 0x00000009;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_ACK: u32 = 0x00002000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_ACK_SHIFT: u32 = 0x0000000D;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_ACK_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_ACK_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_DOWNSPREAD: u32 = 0x00004000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_DOWNSPREAD_SHIFT: u32 = 0x0000000E;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_DOWNSPREAD_FULL_SPREAD: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_DOWNSPREAD_LOW_SPREAD: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_EN: u32 = 0x00001000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_EN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_TYPE: u32 = 0x00008000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_TYPE_SHIFT: u32 = 0x0000000F;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_TYPE_SQUARE: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_CORE_DPLL_SSC_TYPE_TRIANGULAR: u32 = 0x0;

    /* CM_IDLEST_DPLL_CORE */
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_DPLL_CLK: u32 = 0x00000001;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_DPLL_CLK_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_DPLL_CLK_DPLL_LOCKED: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_DPLL_CLK_DPLL_UNLOCKED: u32 = 0x0;

    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_MN_BYPASS: u32 = 0x00000100;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_MN_BYPASS_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_MN_BYPASS_MN_BYPASS: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_CORE_ST_MN_BYPASS_NO_MNBYPASS: u32 = 0x0;

    /* CM_CLKSEL_DPLL_CORE */
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_DIV: u32 = 0x0000007F;
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_DIV_SHIFT: u32 = 0x00000000;

    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_MULT: u32 = 0x0007FF00;
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_MULT_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_MULT_RESERVED_0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_CORE_DPLL_MULT_RESERVED_1: u32 = 0x1;

    /* CM_DIV_M4_DPLL_CORE */
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_DIV: u32 = 0x0000001F;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_DIVCHACK: u32 = 0x00000020;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_DIVCHACK_SHIFT: u32 = 0x00000005;

    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_PWDN: u32 = 0x00001000;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_PWDN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_PWDN_ALWAYS_ACTIVE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_HSDIVIDER_CLKOUT1_PWDN_AUTO_PWDN: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_ST_HSDIVIDER_CLKOUT1: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_ST_HSDIVIDER_CLKOUT1_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_ST_HSDIVIDER_CLKOUT1_CLK_ENABLED: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M4_DPLL_CORE_ST_HSDIVIDER_CLKOUT1_CLK_GATED: u32 = 0x1;

    /* CM_DIV_M5_DPLL_CORE */
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_DIV: u32 = 0x0000001F;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_DIVCHACK: u32 = 0x00000020;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_DIVCHACK_SHIFT: u32 = 0x00000005;

    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_PWDN: u32 = 0x00001000;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_PWDN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_PWDN_ALWAYS_ACTIVE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_HSDIVIDER_CLKOUT2_PWDN_AUTO_PWDN: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_ST_HSDIVIDER_CLKOUT2: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_ST_HSDIVIDER_CLKOUT2_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_ST_HSDIVIDER_CLKOUT2_CLK_ENABLED: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M5_DPLL_CORE_ST_HSDIVIDER_CLKOUT2_CLK_GATED: u32 = 0x1;

    /* CM_DIV_M6_DPLL_CORE */
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_DIV: u32 = 0x0000001F;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_DIVCHACK: u32 = 0x00000020;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_DIVCHACK_SHIFT: u32 = 0x00000005;

    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_PWDN: u32 = 0x00001000;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_PWDN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_PWDN_ALWAYS_ACTIVE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_HSDIVIDER_CLKOUT3_PWDN_AUTO_PWDN: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_ST_HSDIVIDER_CLKOUT3: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_ST_HSDIVIDER_CLKOUT3_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_ST_HSDIVIDER_CLKOUT3_CLK_ENABLED: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M6_DPLL_CORE_ST_HSDIVIDER_CLKOUT3_CLK_GATED: u32 = 0x1;

    /* CM_CLKMODE_DPLL_PER */
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN: u32 = 0x00000007;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_DPLL_LOCK_MODE: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_DPLL_LP_BYP_MODE: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_DPLL_LP_STP_MODE: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_DPLL_MN_BYP_MODE: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_RESERVED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_RESERVED2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_RESERVED3: u32 = 0x3;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_EN_RESERVED6: u32 = 0x6;

    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_ACK: u32 = 0x00002000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_ACK_SHIFT: u32 = 0x0000000D;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_ACK_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_ACK_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_DOWNSPREAD: u32 = 0x00004000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_DOWNSPREAD_SHIFT: u32 = 0x0000000E;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_DOWNSPREAD_FULL_SPREAD: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_DOWNSPREAD_LOW_SPREAD: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_EN: u32 = 0x00001000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_EN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_TYPE: u32 = 0x00008000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_TYPE_SHIFT: u32 = 0x0000000F;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_TYPE_SQUARE: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_PER_DPLL_SSC_TYPE_TRIANGULAR: u32 = 0x0;

    /* CM_IDLEST_DPLL_PER */
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_DPLL_CLK: u32 = 0x00000001;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_DPLL_CLK_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_DPLL_CLK_DPLL_LOCKED: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_DPLL_CLK_DPLL_UNLOCKED: u32 = 0x0;

    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_MN_BYPASS: u32 = 0x00000100;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_MN_BYPASS_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_MN_BYPASS_MN_BYPASS: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_PER_ST_MN_BYPASS_NO_MNBYPASS: u32 = 0x0;

    /* CM_CLKSEL_DPLL_PER */
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_DIV: u32 = 0x000000FF;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_DIV_SHIFT: u32 = 0x00000000;

    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_MULT: u32 = 0x000FFF00;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_MULT_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_MULT_0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_MULT_1: u32 = 0x1;

    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_SD_DIV: u32 = 0xFF000000;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_SD_DIV_SHIFT: u32 = 0x00000018;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_SD_DIV_RESERVED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_PERIPH_DPLL_SD_DIV_RESERVED1: u32 = 0x1;

    /* CM_DIV_M2_DPLL_PER */
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_DIV: u32 = 0x0000007F;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_DIVCHACK: u32 = 0x00000080;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_DIVCHACK_SHIFT: u32 = 0x00000007;

    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_DPLL_CLKOUT_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_ST_DPLL_CLKOUT: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_ST_DPLL_CLKOUT_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_ST_DPLL_CLKOUT_CLK_ENABLED: u32 = 0x1;
    pub const CM_WKUP_CM_DIV_M2_DPLL_PER_ST_DPLL_CLKOUT_CLK_GATED: u32 = 0x0;

    /* CM_CLKMODE_DPLL_DDR */
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_DRIFTGUARD_EN: u32 = 0x00000100;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_DRIFTGUARD_EN_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_DRIFTGUARD_EN_DIASBLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_DRIFTGUARD_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN: u32 = 0x00000007;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_DPLL_FR_BYP_MODE: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_DPLL_LOCK_MODE: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_DPLL_LP_BYP_MODE: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_DPLL_MN_BYP_MODE: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_RESERVED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_RESERVED1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_RESERVED2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_EN_RESERVED3: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_LPMODE_EN: u32 = 0x00000400;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_LPMODE_EN_SHIFT: u32 = 0x0000000A;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_LPMODE_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_LPMODE_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL: u32 = 0x00000018;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL_SHIFT: u32 = 0x00000003;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL_RAMP_ALGO1: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL_RAMP_ALGO2: u32 = 0x2;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL_RAMP_DISABLE: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_LEVEL_RESERVED: u32 = 0x3;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE: u32 = 0x000000E0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_SHIFT: u32 = 0x00000005;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX128: u32 = 0x6;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX16: u32 = 0x3;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX2: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX32: u32 = 0x4;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX4: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX512: u32 = 0x7;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX64: u32 = 0x5;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RAMP_RATE_REFCLKX8: u32 = 0x2;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_REGM4XEN: u32 = 0x00000800;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_REGM4XEN_SHIFT: u32 = 0x0000000B;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_REGM4XEN_DISABLED: u32 = 0x0;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RELOCK_RAMP_EN: u32 = 0x00000200;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_RELOCK_RAMP_EN_SHIFT: u32 = 0x00000009;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_ACK: u32 = 0x00002000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_ACK_SHIFT: u32 = 0x0000000D;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_ACK_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_ACK_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_DOWNSPREAD: u32 = 0x00004000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_DOWNSPREAD_SHIFT: u32 = 0x0000000E;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_DOWNSPREAD_FULL_SPREAD: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_DOWNSPREAD_LOW_SPREAD: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_EN: u32 = 0x00001000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_EN_SHIFT: u32 = 0x0000000C;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_EN_DISABLED: u32 = 0x0;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_EN_ENABLED: u32 = 0x1;

    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_TYPE: u32 = 0x00008000;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_TYPE_SHIFT: u32 = 0x0000000F;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_TYPE_SQUARE: u32 = 0x1;
    pub const CM_WKUP_CM_CLKMODE_DPLL_DDR_DPLL_SSC_TYPE_TRIANGULAR: u32 = 0x0;

    /* CM_IDLEST_DPLL_DDR */
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_DPLL_CLK: u32 = 0x00000001;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_DPLL_CLK_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_DPLL_CLK_DPLL_LOCKED: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_DPLL_CLK_DPLL_UNLOCKED: u32 = 0x0;

    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_MN_BYPASS: u32 = 0x00000100;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_MN_BYPASS_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_MN_BYPASS_MN_BYPASS: u32 = 0x1;
    pub const CM_WKUP_CM_IDLEST_DPLL_DDR_ST_MN_BYPASS_NO_MNBYPASS: u32 = 0x0;

    /* CM_CLKSEL_DPLL_DDR */
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_BYP_CLKSEL: u32 = 0x00800000;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_BYP_CLKSEL_SHIFT: u32 = 0x00000017;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_BYP_CLKSEL_SEL0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_BYP_CLKSEL_SEL1: u32 = 0x1;

    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_DIV: u32 = 0x0000007F;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_DIV_SHIFT: u32 = 0x00000000;

    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_MULT: u32 = 0x0007FF00;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_MULT_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_MULT_0: u32 = 0x0;
    pub const CM_WKUP_CM_CLKSEL_DPLL_DDR_DPLL_MULT_1: u32 = 0x1;

    /* CM_DIV_M2_DPLL_DDR */
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_DIV: u32 = 0x0000001F;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_DIV_SHIFT: u32 = 0x00000000;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_DIV_RESERVED: u32 = 0x0;

    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_DIVCHACK: u32 = 0x00000020;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_DIVCHACK_SHIFT: u32 = 0x00000005;

    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_GATE_CTRL: u32 = 0x00000100;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_GATE_CTRL_SHIFT: u32 = 0x00000008;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_GATE_CTRL_CLK_AUTOGATE: u32 = 0x0;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_DPLL_CLKOUT_GATE_CTRL_CLK_ENABLE: u32 = 0x1;

    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_ST_DPLL_CLKOUT: u32 = 0x00000200;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_ST_DPLL_CLKOUT_SHIFT: u32 = 0x00000009;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_ST_DPLL_CLKOUT_CLK_ENABLED: u32 = 0x1;
    pub const CM_WKUP_CM_DIV_M2_DPLL_DDR_ST_DPLL_CLKOUT_CLK_GATED: u32 = 0x0;

    // CM_PER registers
    pub const CM_PER_L4LS_CLKSTCTRL: u32 = 0x0;
    pub const CM_PER_L3S_CLKSTCTRL: u32 = 0x4;
    pub const CM_PER_L4FW_CLKSTCTRL: u32 = 0x8;
    pub const CM_PER_L3_CLKSTCTRL: u32 = 0xc;
    pub const CM_PER_CPGMAC0_CLKCTRL: u32 = 0x14;
    pub const CM_PER_LCDC_CLKCTRL: u32 = 0x18;
    pub const CM_PER_USB0_CLKCTRL: u32 = 0x1c;
    pub const CM_PER_MLB_CLKCTRL: u32 = 0x20;
    pub const CM_PER_TPTC0_CLKCTRL: u32 = 0x24;
    pub const CM_PER_EMIF_CLKCTRL: u32 = 0x28;
    pub const CM_PER_OCMCRAM_CLKCTRL: u32 = 0x2c;
    pub const CM_PER_GPMC_CLKCTRL: u32 = 0x30;
    pub const CM_PER_MCASP0_CLKCTRL: u32 = 0x34;
    pub const CM_PER_UART5_CLKCTRL: u32 = 0x38;
    pub const CM_PER_MMC0_CLKCTRL: u32 = 0x3c;
    pub const CM_PER_ELM_CLKCTRL: u32 = 0x40;
    pub const CM_PER_I2C2_CLKCTRL: u32 = 0x44;
    pub const CM_PER_I2C1_CLKCTRL: u32 = 0x48;
    pub const CM_PER_SPI0_CLKCTRL: u32 = 0x4c;
    pub const CM_PER_SPI1_CLKCTRL: u32 = 0x50;
    pub const CM_PER_L4LS_CLKCTRL: u32 = 0x60;
    pub const CM_PER_L4FW_CLKCTRL: u32 = 0x64;
    pub const CM_PER_MCASP1_CLKCTRL: u32 = 0x68;
    pub const CM_PER_UART1_CLKCTRL: u32 = 0x6c;
    pub const CM_PER_UART2_CLKCTRL: u32 = 0x70;
    pub const CM_PER_UART3_CLKCTRL: u32 = 0x74;
    pub const CM_PER_UART4_CLKCTRL: u32 = 0x78;
    pub const CM_PER_TIMER7_CLKCTRL: u32 = 0x7c;
    pub const CM_PER_TIMER2_CLKCTRL: u32 = 0x80;
    pub const CM_PER_TIMER3_CLKCTRL: u32 = 0x84;
    pub const CM_PER_TIMER4_CLKCTRL: u32 = 0x88;
    pub const CM_PER_RNG_CLKCTRL: u32 = 0x90;
    pub const CM_PER_AES0_CLKCTRL: u32 = 0x94;
    pub const CM_PER_SHA0_CLKCTRL: u32 = 0xa0;
    pub const CM_PER_PKA_CLKCTRL: u32 = 0xa4;
    pub const CM_PER_GPIO6_CLKCTRL: u32 = 0xa8;
    pub const CM_PER_GPIO1_CLKCTRL: u32 = 0xac;
    pub const CM_PER_GPIO2_CLKCTRL: u32 = 0xb0;
    pub const CM_PER_GPIO3_CLKCTRL: u32 = 0xb4;
    pub const CM_PER_TPCC_CLKCTRL: u32 = 0xbc;
    pub const CM_PER_DCAN0_CLKCTRL: u32 = 0xc0;
    pub const CM_PER_DCAN1_CLKCTRL: u32 = 0xc4;
    pub const CM_PER_EPWMSS1_CLKCTRL: u32 = 0xcc;
    pub const CM_PER_EMIF_FW_CLKCTRL: u32 = 0xd0;
    pub const CM_PER_EPWMSS0_CLKCTRL: u32 = 0xd4;
    pub const CM_PER_EPWMSS2_CLKCTRL: u32 = 0xd8;
    pub const CM_PER_L3_INSTR_CLKCTRL: u32 = 0xdc;
    pub const CM_PER_L3_CLKCTRL: u32 = 0xe0;
    pub const CM_PER_IEEE5000_CLKCTRL: u32 = 0xe4;
    pub const CM_PER_ICSS_CLKCTRL: u32 = 0xe8;
    pub const CM_PER_TIMER5_CLKCTRL: u32 = 0xec;
    pub const CM_PER_TIMER6_CLKCTRL: u32 = 0xf0;
    pub const CM_PER_MMC1_CLKCTRL: u32 = 0xf4;
    pub const CM_PER_MMC2_CLKCTRL: u32 = 0xf8;
    pub const CM_PER_TPTC1_CLKCTRL: u32 = 0xfc;
    pub const CM_PER_TPTC2_CLKCTRL: u32 = 0x100;
    pub const CM_PER_SPINLOCK_CLKCTRL: u32 = 0x10c;
    pub const CM_PER_MAILBOX0_CLKCTRL: u32 = 0x110;
    pub const CM_PER_L4HS_CLKSTCTRL: u32 = 0x11c;
    pub const CM_PER_L4HS_CLKCTRL: u32 = 0x120;
    pub const CM_PER_MSTR_EXPS_CLKCTRL: u32 = 0x124;
    pub const CM_PER_SLV_EXPS_CLKCTRL: u32 = 0x128;
    pub const CM_PER_OCPWP_L3_CLKSTCTRL: u32 = 0x12c;
    pub const CM_PER_OCPWP_CLKCTRL: u32 = 0x130;
    pub const CM_PER_ICSS_CLKSTCTRL: u32 = 0x140;
    pub const CM_PER_CPSW_CLKSTCTRL: u32 = 0x144;
    pub const CM_PER_LCDC_CLKSTCTRL: u32 = 0x148;
    pub const CM_PER_CLKDIV32K_CLKCTRL: u32 = 0x14c;
    pub const CM_PER_CLK_24MHZ_CLKSTCTRL: u32 = 0x150;
}

pub mod gpio {
    const GPIO1_BASE: u32 = 0x4804c000;
    const GPIO_CTRL_OFF: u32 = 0x130;
    const GPIO_OE_OFF: u32 = 0x134;
    const GPIO_SETDATAOUT_OFF: u32 = 0x194;
    const GPIO_CLEARDATAOUT_OFF: u32 = 0x190;
}

pub mod uart {
    pub const UART_THR_OFF: u32 = 0x00;
    pub const UART_SYSC_OFF: u32 = 0x54;
    pub const UART_SYSS_OFF: u32 = 0x58;
    pub const UART_LCR_OFF: u32 = 0x0C;
    pub const UART_EFR_OFF: u32 = 0x08;
    pub const UART_MCR_OFF: u32 = 0x10;
    pub const UART_FCR_OFF: u32 = 0x08;
    pub const UART_TLR_OFF: u32 = 0x1C;
    pub const UART_SCR_OFF: u32 = 0x40;
    pub const UART_MDR1_OFF: u32 = 0x20;
    pub const UART_IER_UART_OFF: u32 = 0x04;
    pub const UART_DLL_OFF: u32 = 0x00;
    pub const UART_DLH_OFF: u32 = 0x04;
    pub const UART_LSR_UART_OFF: u32 = 0x14;
}

pub mod tps {
    pub const MASK_ALL_BITS: u8 = 0xFF;

    pub const PASSWORD_LOCK_FOR_WRITE: u8 = 0x00;
    pub const PASSWORD_UNLOCK: u8 = 0x7D;
    pub const PMIC_TPS65217_I2C_SLAVE_ADDR: u8 = 0x24;

    pub const PROT_LEVEL_NONE: u32 = 0x00;
    pub const PROT_LEVEL_1: u32 = 0x01;
    pub const PROT_LEVEL_2: u32 = 0x02;

    // Register offsets
    pub const POWER_PATH: u8 = 0x01;
    pub const STATUS: u8 = 0x0A;
    pub const PASSWORD: u8 = 0x0B;
    pub const DEFDCDC1: u8 = 0x0E;
    pub const DEFDCDC2: u8 = 0x0F;
    pub const DEFDCDC3: u8 = 0x10;

    pub const DEFSLEW: u8 = 0x11;
    pub const DEFLS1: u8 = 0x14;
    pub const DEFLS2: u8 = 0x15;
    pub const DCDC_GO: u8 = 0x80;
    pub const LDO_VOLTAGE_OUT_3_3: u8 = 0x1F;
    pub const LDO_MASK: u8 = 0x1F;

    pub const USB_INPUT_CUR_LIMIT_MASK: u8 = 0x03;
    pub const USB_INPUT_CUR_LIMIT_100MA: u8 = 0x00;
    pub const USB_INPUT_CUR_LIMIT_500MA: u8 = 0x01;
    pub const USB_INPUT_CUR_LIMIT_1300MA: u8 = 0x02;
    pub const USB_INPUT_CUR_LIMIT_1800MA: u8 = 0x03;

    pub const DCDC_VOLT_SEL_1275MV: u8 = 0x0F;
    pub const DCDC_VOLT_SEL_1200MV: u8 = 0x0C;
    pub const DCDC_VOLT_SEL_1100MV: u8 = 0x08;
    pub const DCDC_VOLT_SEL_0950MV: u8 = 0x02;

    // efuse
    // BOARDINFO board_info;
    pub const DEVICE_VERSION_1_0: u32 = 0;
    pub const DEVICE_VERSION_2_0: u32 = 1;
    pub const DEVICE_VERSION_2_1: u32 = 2;

    // EFUSE OPP bit mask
    pub const EFUSE_OPP_MASK: u32 = 0x00001FFF;

    // EFUSE bit for OPP100 275Mhz - 1.1v
    pub const EFUSE_OPP100_275_MASK: u32 = 0x00000001;
    pub const EFUSE_OPP100_275: u32 = 0x0;

    // EFUSE bit for OPP100 500Mhz - 1.1v
    pub const EFUSE_OPP100_500_MASK: u32 = 0x00000002;
    pub const EFUSE_OPP100_500: u32 = 0x1;

    // EFUSE bit for OPP120 600Mhz - 1.2v
    pub const EFUSE_OPP120_600_MASK: u32 = 0x00000004;
    pub const EFUSE_OPP120_600: u32 = 0x2;

    // EFUSE bit for OPP TURBO 720Mhz - 1.26v
    pub const EFUSE_OPPTB_720_MASK: u32 = 0x00000008;
    pub const EFUSE_OPPTB_720: u32 = 0x3;

    // EFUSE bit for OPP50 300Mhz - 950mv
    pub const EFUSE_OPP50_300_MASK: u32 = 0x00000010;
    pub const EFUSE_OPP50_300: u32 = 0x4;

    // EFUSE bit for OPP100 300Mhz - 1.1v
    pub const EFUSE_OPP100_300_MASK: u32 = 0x00000020;
    pub const EFUSE_OPP100_300: u32 = 0x5;

    // EFUSE bit for OPP100 600Mhz - 1.1v
    pub const EFUSE_OPP100_600_MASK: u32 = 0x00000040;
    pub const EFUSE_OPP100_600: u32 = 0x6;

    // EFUSE bit for OPP120 720Mhz - 1.2v
    pub const EFUSE_OPP120_720_MASK: u32 = 0x00000050;
    pub const EFUSE_OPP120_720: u32 = 0x7;

    // EFUSE bit for OPP TURBO 800Mhz - 1.26v
    pub const EFUSE_OPPTB_800_MASK: u32 = 0x00000100;
    pub const EFUSE_OPPTB_800: u32 = 0x8;

    // EFUSE bit for OPP NITRO 1000Mhz - 1.325v
    pub const EFUSE_OPPNT_1000_MASK: u32 = 0x00000200;
    pub const EFUSE_OPPNT_1000: u32 = 0x9;

    pub const EFUSE_OPP_MAX: u32 = EFUSE_OPPNT_1000 + 1;

    /* Types of Opp */
    pub const OPP_NONE: u32 = 0;
    pub const OPP_50: u32 = 1;
    pub const OPP_100: u32 = 2;
    pub const OPP_120: u32 = 3;
    pub const SR_TURBO: u32 = 4;
    pub const OPP_NITRO: u32 = 5;

    pub const MPUPLL_M_275_MHZ: u32 = 275;
    pub const MPUPLL_M_300_MHZ: u32 = 300;
    pub const MPUPLL_M_500_MHZ: u32 = 500;
    pub const MPUPLL_M_600_MHZ: u32 = 600;
    pub const MPUPLL_M_720_MHZ: u32 = 720;
    pub const MPUPLL_M_800_MHZ: u32 = 800;
    pub const MPUPLL_M_1000_MHZ: u32 = 1000;

    pub const PMIC_VOLT_SEL_0950MV: u8 = DCDC_VOLT_SEL_0950MV;
    pub const PMIC_VOLT_SEL_1100MV: u8 = DCDC_VOLT_SEL_1100MV;
    pub const PMIC_VOLT_SEL_1200MV: u8 = DCDC_VOLT_SEL_1200MV;
    pub const PMIC_VOLT_SEL_1260MV: u8 = DCDC_VOLT_SEL_1275MV;
    pub const PMIC_VOLT_SEL_1325MV: u8 = 0x11;
}

pub mod i2c {
    pub const I2C_SYSC: u32 = 0x10;
    pub const I2C_SYSS: u32 = 0x90;
    pub const I2C_SA: u32 = 0xAC;
    pub const I2C_CON: u32 = 0xA4;
    pub const I2C_CNT: u32 = 0x98;
    pub const I2C_DATA: u32 = 0x9C;
    pub const I2C_PSC: u32 = 0xB0;
    pub const I2C_SCLL: u32 = 0xB4;
    pub const I2C_SCLH: u32 = 0xB8;

    pub const I2C_IRQENABLE_CLR: u32 = 0x30;
    pub const I2C_IRQSTATUS: u32 = 0x28;
    pub const I2C_IRQSTATUS_RAW: u32 = 0x24;
    pub const I2C_IRQSTATUS_RAW_BB: u32 = 0x00001000;

    pub const I2C_CON_I2C_EN: u32 = 0x0000_8000;
    pub const I2C_CON_STP: u32 = 0x0000_0002;
    pub const I2C_CON_STT: u32 = 0x0000_0001;

    pub const I2C_SYSC_SRST: u32 = 0x0000_0002;

    pub const I2C_SYSS_RDONE: u32 = 0x0000_0001;
    pub const I2C_SYSS_RDONE_SHIFT: u32 = 0x0000_0000;
    pub const I2C_SYSS_RDONE_RSTCOMP: u32 = 0x1;
    pub const I2C_SYSS_RDONE_RSTONGOING: u32 = 0x0;

    pub const I2C_CON_TRX: u32 = 0x0000_0200;
    pub const I2C_CON_MST: u32 = 0x0000_0400;

    pub const I2C_CFG_MST_TX: u32 = I2C_CON_MST | I2C_CON_TRX;
    pub const I2C_CFG_MST_RX: u32 = I2C_CON_MST;
    pub const I2C_CFG_STOP: u32 = I2C_CON_STP;

    pub const I2C_INT_TRANSMIT_READY: u32 = I2C_IRQSTATUS_XRDY;
    pub const I2C_INT_RECEIVE_READY: u32 = I2C_IRQSTATUS_RRDY;
    pub const I2C_INT_ADRR_READY_ACESS: u32 = I2C_IRQSTATUS_ARDY;

    /* IRQSTATUS */
    pub const I2C_IRQSTATUS_AAS: u32 = 0x0000_0200;
    pub const I2C_IRQSTATUS_AAS_SHIFT: u32 = 0x0000_0009;
    pub const I2C_IRQSTATUS_AAS_NO: u32 = 0x0;
    pub const I2C_IRQSTATUS_AAS_RECOGNIZED: u32 = 0x1;

    pub const I2C_IRQSTATUS_AERR: u32 = 0x0000_0080;
    pub const I2C_IRQSTATUS_AERR_SHIFT: u32 = 0x0000_0007;
    pub const I2C_IRQSTATUS_AERR_ERROR: u32 = 0x1;
    pub const I2C_IRQSTATUS_AERR_NO: u32 = 0x0;

    pub const I2C_IRQSTATUS_AL: u32 = 0x0000_0001;
    pub const I2C_IRQSTATUS_AL_SHIFT: u32 = 0x0000_0000;
    pub const I2C_IRQSTATUS_AL_LOST: u32 = 0x1;
    pub const I2C_IRQSTATUS_AL_NORMAL: u32 = 0x0;

    pub const I2C_IRQSTATUS_ARDY: u32 = 0x0000_0004;
    pub const I2C_IRQSTATUS_ARDY_SHIFT: u32 = 0x0000_0002;
    pub const I2C_IRQSTATUS_ARDY_BUSY: u32 = 0x0;
    pub const I2C_IRQSTATUS_ARDY_READY: u32 = 0x1;

    pub const I2C_IRQSTATUS_BB: u32 = 0x0000_1000;
    pub const I2C_IRQSTATUS_BB_SHIFT: u32 = 0x0000_000C;
    pub const I2C_IRQSTATUS_BB_FREE: u32 = 0x0;
    pub const I2C_IRQSTATUS_BB_OCCUPIED: u32 = 0x1;

    pub const I2C_IRQSTATUS_BF: u32 = 0x0000_0100;
    pub const I2C_IRQSTATUS_BF_SHIFT: u32 = 0x0000_0008;
    pub const I2C_IRQSTATUS_BF_FREE: u32 = 0x1;
    pub const I2C_IRQSTATUS_BF_NO: u32 = 0x0;

    pub const I2C_IRQSTATUS_GC: u32 = 0x0000_0020;
    pub const I2C_IRQSTATUS_GC_SHIFT: u32 = 0x0000_0005;
    pub const I2C_IRQSTATUS_GC_GENERALCALL: u32 = 0x1;
    pub const I2C_IRQSTATUS_GC_NO: u32 = 0x0;

    pub const I2C_IRQSTATUS_NACK: u32 = 0x0000_0002;
    pub const I2C_IRQSTATUS_NACK_SHIFT: u32 = 0x0000_0001;
    pub const I2C_IRQSTATUS_NACK_DETECTED: u32 = 0x1;
    pub const I2C_IRQSTATUS_NACK_NOTDETECTED: u32 = 0x0;

    pub const I2C_IRQSTATUS_RDR: u32 = 0x0000_2000;
    pub const I2C_IRQSTATUS_RDR_SHIFT: u32 = 0x0000_000D;
    pub const I2C_IRQSTATUS_RDR_ENABLED: u32 = 0x1;
    pub const I2C_IRQSTATUS_RDR_INACTIVE: u32 = 0x0;

    pub const I2C_IRQSTATUS_ROVR: u32 = 0x0000_0800;
    pub const I2C_IRQSTATUS_ROVR_SHIFT: u32 = 0x0000_000B;
    pub const I2C_IRQSTATUS_ROVR_NORMAL: u32 = 0x0;
    pub const I2C_IRQSTATUS_ROVR_OVERRUN: u32 = 0x1;

    pub const I2C_IRQSTATUS_RRDY: u32 = 0x0000_0008;
    pub const I2C_IRQSTATUS_RRDY_SHIFT: u32 = 0x0000_0003;
    pub const I2C_IRQSTATUS_RRDY_DATAREADY: u32 = 0x1;
    pub const I2C_IRQSTATUS_RRDY_NODATA: u32 = 0x0;

    pub const I2C_IRQSTATUS_STC: u32 = 0x0000_0040;
    pub const I2C_IRQSTATUS_STC_SHIFT: u32 = 0x0000_0006;
    pub const I2C_IRQSTATUS_STC_NO: u32 = 0x0;
    pub const I2C_IRQSTATUS_STC_STARTCONDITION: u32 = 0x1;

    pub const I2C_IRQSTATUS_XDR: u32 = 0x0000_4000;
    pub const I2C_IRQSTATUS_XDR_SHIFT: u32 = 0x0000_000E;
    pub const I2C_IRQSTATUS_XDR_ENABLED: u32 = 0x1;
    pub const I2C_IRQSTATUS_XDR_INACTIVE: u32 = 0x0;

    pub const I2C_IRQSTATUS_XRDY: u32 = 0x0000_0010;
    pub const I2C_IRQSTATUS_XRDY_SHIFT: u32 = 0x0000_0004;
    pub const I2C_IRQSTATUS_XRDY_DATAREADY: u32 = 0x1;
    pub const I2C_IRQSTATUS_XRDY_ONGOING: u32 = 0x0;

    pub const I2C_IRQSTATUS_XUDF: u32 = 0x0000_0400;
    pub const I2C_IRQSTATUS_XUDF_SHIFT: u32 = 0x0000_000A;
    pub const I2C_IRQSTATUS_XUDF_NORMAL: u32 = 0x0;
    pub const I2C_IRQSTATUS_XUDF_UNDERFLOW: u32 = 0x1;

    pub const I2C_INT_STOP_CONDITION: u32 = I2C_IRQSTATUS_BF;

    // clocks
    /// System clock fed to I2C module - 48Mhz
    pub const I2C_SYSTEM_CLOCK: u32 = 48_000_000;
    /// Internal clock used by I2C module - 12Mhz
    pub const I2C_INTERNAL_CLOCK: u32 = 12_000_000;
    /// I2C bus speed or frequency - 100Khz
    pub const I2C_OUTPUT_CLOCK: u32 = 100_000;
    pub const I2C_INTERRUPT_FLAG_TO_CLR: u32 = 0x7FF;
}

pub mod dram {

    pub const CONTROL_VTP_CTRL: u32 = 0xe0c;
    pub const CONTROL_VREF_CTRL: u32 = 0xe14;
    /* VTP_CTRL */
    pub const CONTROL_VTP_CTRL_CLRZ: u32 = 0x00000001;
    pub const CONTROL_VTP_CTRL_CLRZ_SHIFT: u32 = 0x00000000;

    pub const CONTROL_VTP_CTRL_ENABLE: u32 = 0x00000040;
    pub const CONTROL_VTP_CTRL_ENABLE_SHIFT: u32 = 0x00000006;

    pub const CONTROL_VTP_CTRL_FILTER: u32 = 0x0000000E;
    pub const CONTROL_VTP_CTRL_FILTER_SHIFT: u32 = 0x00000001;

    pub const CONTROL_VTP_CTRL_LOCK: u32 = 0x00000010;
    pub const CONTROL_VTP_CTRL_LOCK_SHIFT: u32 = 0x00000004;

    pub const CONTROL_VTP_CTRL_NCIN: u32 = 0x00007F00;
    pub const CONTROL_VTP_CTRL_NCIN_SHIFT: u32 = 0x00000008;

    pub const CONTROL_VTP_CTRL_PCIN: u32 = 0x007F0000;
    pub const CONTROL_VTP_CTRL_PCIN_SHIFT: u32 = 0x00000010;

    pub const CONTROL_VTP_CTRL_READY: u32 = 0x00000020;
    pub const CONTROL_VTP_CTRL_READY_SHIFT: u32 = 0x00000005;

    pub const CONTROL_VTP_CTRL_RSVD2: u32 = 0x00008000;
    pub const CONTROL_VTP_CTRL_RSVD2_SHIFT: u32 = 0x0000000F;

    pub const CONTROL_VTP_CTRL_RSVD3: u32 = 0xFF800000;
    pub const CONTROL_VTP_CTRL_RSVD3_SHIFT: u32 = 0x00000017;

    pub const CONTROL_DDR_CKE_CTRL: u32 = 0x131c;
    pub const SOC_EMIF_0_REGS: u32 = 0x4C000000;
    pub const EMIF_DDR_PHY_CTRL_1: u32 = 0xE4;
    pub const EMIF_DDR_PHY_CTRL_1_SHDW: u32 = 0xE8;
    pub const EMIF_DDR_PHY_CTRL_2: u32 = 0xEC;

    /* DDR_CKE_CTRL */
    pub const CONTROL_DDR_CKE_CTRL_DDR_CKE_CTRL: u32 = 0x00000001;
    pub const CONTROL_DDR_CKE_CTRL_DDR_CKE_CTRL_SHIFT: u32 = 0x00000000;

    pub const CONTROL_DDR_CKE_CTRL_SMA1: u32 = 0xFFFFFFFE;
    pub const CONTROL_DDR_CKE_CTRL_SMA1_SHIFT: u32 = 0x00000001;

    pub const CMD0_SLAVE_RATIO_0: u32 = 0x1C;
    pub const CMD0_SLAVE_FORCE_0: u32 = 0x20;
    pub const CMD0_SLAVE_DELAY_0: u32 = 0x24;
    pub const CMD0_LOCK_DIFF_0: u32 = 0x28;
    pub const CMD0_INVERT_CLKOUT_0: u32 = 0x2C;
    pub const CMD1_SLAVE_RATIO_0: u32 = 0x50;
    pub const CMD1_SLAVE_FORCE_0: u32 = 0x54;
    pub const CMD1_SLAVE_DELAY_0: u32 = 0x58;
    pub const CMD1_LOCK_DIFF_0: u32 = 0x5C;
    pub const CMD1_INVERT_CLKOUT_0: u32 = 0x60;
    pub const CMD2_SLAVE_RATIO_0: u32 = 0x84;
    pub const CMD2_SLAVE_FORCE_0: u32 = 0x88;
    pub const CMD2_SLAVE_DELAY_0: u32 = 0x8C;
    pub const CMD2_LOCK_DIFF_0: u32 = 0x90;
    pub const CMD2_INVERT_CLKOUT_0: u32 = 0x94;
    pub const DATA0_RD_DQS_SLAVE_RATIO_0: u32 = 0xC8;
    pub const DATA0_RD_DQS_SLAVE_RATIO_1: u32 = 0xCC;
    pub const DATA0_WR_DQS_SLAVE_RATIO_0: u32 = 0xDC;
    pub const DATA0_WR_DQS_SLAVE_RATIO_1: u32 = 0xE0;
    pub const DATA0_WRLVL_INIT_RATIO_0: u32 = 0xF0;
    pub const DATA0_WRLVL_INIT_RATIO_1: u32 = 0xF4;
    pub const DATA0_GATELVL_INIT_RATIO_0: u32 = 0xFC;
    pub const DATA0_GATELVL_INIT_RATIO_1: u32 = 0x100;
    pub const DATA0_FIFO_WE_SLAVE_RATIO_0: u32 = 0x108;
    pub const DATA0_FIFO_WE_SLAVE_RATIO_1: u32 = 0x10C;
    pub const DATA0_WR_DATA_SLAVE_RATIO_0: u32 = 0x120;
    pub const DATA0_WR_DATA_SLAVE_RATIO_1: u32 = 0x124;
    pub const DATA0_USE_RANK0_DELAYS_0: u32 = 0x134;
    pub const DATA0_LOCK_DIFF_0: u32 = 0x138;
    pub const DATA1_RD_DQS_SLAVE_RATIO_0: u32 = 0x16C;
    pub const DATA1_RD_DQS_SLAVE_RATIO_1: u32 = 0x170;
    pub const DATA1_WR_DQS_SLAVE_RATIO_0: u32 = 0x180;
    pub const DATA1_WR_DQS_SLAVE_RATIO_1: u32 = 0x184;
    pub const DATA1_WRLVL_INIT_RATIO_0: u32 = 0x194;
    pub const DATA1_WRLVL_INIT_RATIO_1: u32 = 0x198;
    pub const DATA1_GATELVL_INIT_RATIO_0: u32 = 0x1A0;
    pub const DATA1_GATELVL_INIT_RATIO_1: u32 = 0x1A4;
    pub const DATA1_FIFO_WE_SLAVE_RATIO_0: u32 = 0x1AC;
    pub const DATA1_FIFO_WE_SLAVE_RATIO_1: u32 = 0x1B0;
    pub const DATA1_WR_DATA_SLAVE_RATIO_0: u32 = 0x1C4;
    pub const DATA1_WR_DATA_SLAVE_RATIO_1: u32 = 0x1C8;
    pub const DATA1_USE_RANK0_DELAYS_0: u32 = 0x1D8;
    pub const DATA1_LOCK_DIFF_0: u32 = 0x1DC;

    pub const DDR3_CMD0_SLAVE_RATIO_0: u32 = 0x80;
    pub const DDR3_CMD0_INVERT_CLKOUT_0: u32 = 0x0;
    pub const DDR3_CMD1_SLAVE_RATIO_0: u32 = 0x80;
    pub const DDR3_CMD1_INVERT_CLKOUT_0: u32 = 0x0;
    pub const DDR3_CMD2_SLAVE_RATIO_0: u32 = 0x80;
    pub const DDR3_CMD2_INVERT_CLKOUT_0: u32 = 0x0;

    pub const DDR3_DATA0_RD_DQS_SLAVE_RATIO_0: u32 = 0x38;
    pub const DDR3_DATA0_WR_DQS_SLAVE_RATIO_0: u32 = 0x44;
    pub const DDR3_DATA0_FIFO_WE_SLAVE_RATIO_0: u32 = 0x94;
    pub const DDR3_DATA0_WR_DATA_SLAVE_RATIO_0: u32 = 0x7D;

    pub const DDR3_DATA0_RD_DQS_SLAVE_RATIO_1: u32 = 0x38;
    pub const DDR3_DATA0_WR_DQS_SLAVE_RATIO_1: u32 = 0x44;
    pub const DDR3_DATA0_FIFO_WE_SLAVE_RATIO_1: u32 = 0x94;
    pub const DDR3_DATA0_WR_DATA_SLAVE_RATIO_1: u32 = 0x7D;

    pub const DDR3_CONTROL_DDR_CMD_IOCTRL_0: u32 = 0x18B;
    pub const DDR3_CONTROL_DDR_CMD_IOCTRL_1: u32 = 0x18B;
    pub const DDR3_CONTROL_DDR_CMD_IOCTRL_2: u32 = 0x18B;

    pub const DDR3_CONTROL_DDR_DATA_IOCTRL_0: u32 = 0x18B;
    pub const DDR3_CONTROL_DDR_DATA_IOCTRL_1: u32 = 0x18B;

    pub const DDR3_CONTROL_DDR_IO_CTRL: u32 = 0xefffffff;

    pub const CONTROL_DDR_CMD_IOCTRL_0: u32 = 0x1404;
    pub const CONTROL_DDR_CMD_IOCTRL_1: u32 = 0x1408;
    pub const CONTROL_DDR_CMD_IOCTRL_2: u32 = 0x140C;

    pub const CONTROL_DDR_DATA_IOCTRL_0: u32 = 0x1440;
    pub const CONTROL_DDR_DATA_IOCTRL_1: u32 = 0x1444;

    /* DDR_IO_CTRL */
    pub const CONTROL_DDR_IO_CTRL_DDR3_RST_DEF_VAL: u32 = 0x80000000;
    pub const CONTROL_DDR_IO_CTRL_DDR3_RST_DEF_VAL_SHIFT: u32 = 0x0000001F;

    pub const CONTROL_DDR_IO_CTRL_DDR_WUCLK_DISABLE: u32 = 0x40000000;
    pub const CONTROL_DDR_IO_CTRL_DDR_WUCLK_DISABLE_SHIFT: u32 = 0x0000001E;

    pub const CONTROL_DDR_IO_CTRL_MDDR_SEL: u32 = 0x10000000;
    pub const CONTROL_DDR_IO_CTRL_MDDR_SEL_SHIFT: u32 = 0x0000001C;

    pub const CONTROL_DDR_IO_CTRL_RSVD2: u32 = 0x20000000;
    pub const CONTROL_DDR_IO_CTRL_RSVD2_SHIFT: u32 = 0x0000001D;

    pub const CONTROL_DDR_IO_CTRL: u32 = 0xe04;

    // emif final setup
    pub const DDR3_EMIF_DDR_PHY_CTRL_1: u32 = 0x06;
    pub const DDR3_EMIF_DDR_PHY_CTRL_1_DY_PWRDN: u32 = 0x00100000;
    pub const DDR3_EMIF_DDR_PHY_CTRL_1_SHDW: u32 = 0x06;
    pub const DDR3_EMIF_DDR_PHY_CTRL_1_SHDW_DY_PWRDN: u32 = 0x00100000;
    pub const DDR3_EMIF_DDR_PHY_CTRL_2: u32 = 0x06;

    pub const DDR3_EMIF_SDRAM_TIM_1: u32 = 0x0AAAD4DB;
    pub const DDR3_EMIF_SDRAM_TIM_1_SHDW: u32 = 0x0AAAD4DB;

    pub const DDR3_EMIF_SDRAM_TIM_2: u32 = 0x266B7FDA;
    pub const DDR3_EMIF_SDRAM_TIM_2_SHDW: u32 = 0x266B7FDA;

    pub const DDR3_EMIF_SDRAM_TIM_3: u32 = 0x501F867F;
    pub const DDR3_EMIF_SDRAM_TIM_3_SHDM: u32 = 0x501F867F;

    pub const DDR3_EMIF_SDRAM_REF_CTRL_VAL1: u32 = 0x00000C30;
    pub const DDR3_EMIF_SDRAM_REF_CTRL_SHDW_VAL1: u32 = 0x00000C30;

    pub const DDR3_EMIF_ZQ_CONFIG_VAL: u32 = 0x50074BE4;
    pub const DDR3_EMIF_SDRAM_CONFIG: u32 = 0x61C04BB2;

    pub const EMIF_SDRAM_TIM_1: u32 = 0x18;
    pub const EMIF_SDRAM_TIM_1_SHDW: u32 = 0x1C;
    pub const EMIF_SDRAM_TIM_2: u32 = 0x20;
    pub const EMIF_SDRAM_TIM_2_SHDW: u32 = 0x24;
    pub const EMIF_SDRAM_TIM_3: u32 = 0x28;
    pub const EMIF_SDRAM_TIM_3_SHDW: u32 = 0x2C;
    pub const EMIF_SDRAM_REF_CTRL: u32 = 0x10;
    pub const EMIF_SDRAM_REF_CTRL_SHDW: u32 = 0x14;
    pub const EMIF_ZQ_CONFIG: u32 = 0xC8;
    pub const EMIF_SDRAM_CONFIG: u32 = 0x8;
    pub const CONTROL_SECURE_EMIF_SDRAM_CONFIG: u32 = 0x110;
    pub const CONTROL_SECURE_EMIF_SDRAM_CONFIG_2: u32 = 0x114;
}

pub mod control {
    pub const REVISION: u32 = 0x0;
    pub const HWINFO: u32 = 0x4;
    pub const SYSCONFIG: u32 = 0x10;
    pub const STATUS: u32 = 0x40;
    pub const BOOTSTAT: u32 = 0x44;
    pub const SEC_CTRL: u32 = 0x100;
    pub const SEC_SW: u32 = 0x104;
    pub const SEC_EMU: u32 = 0x108;
    pub const SECURE_EMIF_SDRAM_CONFIG: u32 = 0x110;
    pub const SECURE_EMIF_SDRAM_CONFIG_2: u32 = 0x114;
    pub const SW_CFG: u32 = 0x118;
    pub const SW_CCFG: u32 = 0x11c;
    pub const MPK: fn(n: u32) -> u32 = |n| 0x120 + (n * 4);
    pub const SWRV: fn(n: u32) -> u32 = |n| 0x140 + (n * 4);
    pub const SEC_TAP: u32 = 0x180;
    pub const SEC_TAP_CMDIN: u32 = 0x184;
    pub const SEC_TAP_CMDOUT: u32 = 0x188;
    pub const SEC_TAP_DATIN: u32 = 0x18c;
    pub const SEC_TAP_DATOUT: u32 = 0x190;
    pub const MREQDOMAIN_EXP1: u32 = 0x198;
    pub const MREQDOMAIN_EXP2: u32 = 0x19c;
    pub const L3_HW_FW_EXP_VAL_CONF0: u32 = 0x1a0;
    pub const L3_HW_FW_EXP_VAL_CONF1: u32 = 0x1a4;
    pub const L4_HW_FW_EXP_VAL_CONF: u32 = 0x1a8;
    pub const SEC_LOAD_FW_EXP_VAL: u32 = 0x1ac;
    pub const SEC_CTRL_RO: u32 = 0x1b4;
    pub const EMIF_OBFUSCATION_KEY: u32 = 0x1b8;
    pub const SEC_CLK_CTRL: u32 = 0x1bc;
    pub const MREQDOMAIN_EXP3: u32 = 0x1d4;
    pub const CEK: fn(n: u32) -> u32 = |n| 0x200 + (n * 4);
    pub const CEK_BCH: fn(n: u32) -> u32 = |n| 0x210 + (n * 4);
    pub const MSV_0: u32 = 0x224;
    pub const MSV_BCH: fn(n: u32) -> u32 = |n| 0x228 + (n * 4);
    pub const SEC_STATUS: u32 = 0x240;
    pub const SECMEM_STATUS: u32 = 0x244;
    pub const SEC_ERR_STAT_FUNC: fn(n: u32) -> u32 = |n| 0x248 + (n * 4);
    pub const SEC_ERR_STAT_DBUG: fn(n: u32) -> u32 = |n| 0x250 + (n * 4);
    pub const KEK_SW: fn(n: u32) -> u32 = |n| 0x260 + (n * 4);
    pub const CMPK_BCH: fn(n: u32) -> u32 = |n| 0x280 + (n * 4);
    pub const CMPK: fn(n: u32) -> u32 = |n| 0x2b0 + (n * 4);
    pub const SSM_END_FAST_SECRAM: u32 = 0x300;
    pub const SSM_FIREWALL_CONTROLLER: u32 = 0x304;
    pub const SSM_START_SECURE_STACKED_RAM: u32 = 0x308;
    pub const SSM_END_SECURE_STACKED_RAM: u32 = 0x30c;
    pub const SSM_START_SPM_STACK: u32 = 0x310;
    pub const SSM_END_SPM_STACK: u32 = 0x314;
    pub const SSM_START_MONITOR_RAMCODE: u32 = 0x318;
    pub const SSM_END_MONITOR_RAMCODE: u32 = 0x31c;
    pub const SSM_END_MONITOR_RAMDATA: u32 = 0x320;
    pub const SSM_START_MONITOR_CODE: u32 = 0x324;
    pub const SSM_END_MONITOR_CODE: u32 = 0x328;
    pub const SSM_START_MONITOR_PERIPH: u32 = 0x32c;
    pub const SSM_END_MONITOR_PERIPH: u32 = 0x330;
    pub const SSM_START_MONITOR_STACK: u32 = 0x334;
    pub const SSM_END_MONITOR_STACK: u32 = 0x338;
    pub const SSM_START_MONITOR_RAMCODE_ETM: u32 = 0x33c;
    pub const SSM_END_MONITOR_RAMCODE_ETM: u32 = 0x340;
    pub const SSM_END_MONITOR_RAMDATA_ETM: u32 = 0x344;
    pub const SSM_START_MONITOR_CODE_ETM: u32 = 0x348;
    pub const SSM_END_MONITOR_CODE_ETM: u32 = 0x34c;
    pub const SSM_START_MONITOR_STACK_ETM: u32 = 0x350;
    pub const SSM_END_MONITOR_STACK_ETM: u32 = 0x354;
    pub const SSM_START_MONITOR_SHARED_ETM: u32 = 0x358;
    pub const SSM_END_MONITOR_SHARED_ETM: u32 = 0x35c;
    pub const SSM_START_MONITOR_PERIPH_ETM: u32 = 0x360;
    pub const SSM_END_MONITOR_PERIPH_ETM: u32 = 0x364;
    pub const SSM_CPSR_MODE_ENFC: u32 = 0x368;
    pub const SSM_END_L3_SECRAM: u32 = 0x36c;
    pub const CORTEX_VBBLDO_CTRL: u32 = 0x41c;
    pub const CORE_SLDO_CTRL: u32 = 0x428;
    pub const MPU_SLDO_CTRL: u32 = 0x42c;
    pub const REFCLK_LJCBLDO_CTRL: u32 = 0x440;
    pub const CLK32KDIVRATIO_CTRL: u32 = 0x444;
    pub const BANDGAP_CTRL: u32 = 0x448;
    pub const BANDGAP_TRIM: u32 = 0x44c;
    pub const PLL_CLKINPULOW_CTRL: u32 = 0x458;
    pub const MOSC_CTRL: u32 = 0x468;
    pub const RCOSC_CTRL: u32 = 0x46c;
    pub const DEEPSLEEP_CTRL: u32 = 0x470;
    pub const PE_SCRATCHPAD: fn(n: u32) -> u32 = |n| 0x500 + (n * 4);
    pub const DEVICE_ID: u32 = 0x600;
    pub const DEV_FEATURE: u32 = 0x604;
    pub const INIT_PRIORITY: fn(n: u32) -> u32 = |n| 0x608 + (n * 4);
    pub const MMU_CFG: u32 = 0x610;
    pub const TPTC_CFG: u32 = 0x614;
    pub const OCMC_CFG: u32 = 0x618;
    pub const USB_CTRL: fn(n: u32) -> u32 = |n| 0x620 + (n * 8);
    pub const USB_STS: fn(n: u32) -> u32 = |n| 0x624 + (n * 8);
    pub const MAC_ID_LO: fn(n: u32) -> u32 = |n| 0x630 + (n * 8);
    pub const MAC_ID_HI: fn(n: u32) -> u32 = |n| 0x634 + (n * 8);
    pub const DCAN_RAMINIT: u32 = 0x644;
    pub const USB_WKUP_CTRL: u32 = 0x648;
    pub const GMII_SEL: u32 = 0x650;
    pub const PWMSS_CTRL: u32 = 0x664;
    pub const MREQPRIO: fn(n: u32) -> u32 = |n| 0x670 + (n * 4);
    pub const HW_EVENT_SEL_GRP: fn(n: u32) -> u32 = |n| 0x690 + (n * 4);
    pub const SMRT_CTRL: u32 = 0x6a0;
    pub const SABTOOTH_HW_DEBUG_SEL: u32 = 0x6a4;
    pub const SABTOOTH_HW_DBG_INFO: u32 = 0x6a8;
    pub const MRGN_MODE: fn(n: u32) -> u32 = |n| 0x6c0 + (n * 4);
    pub const VDD_MPU_OPP: fn(n: u32) -> u32 = |n| 0x770 + (n * 4);
    pub const VDD_MPU_OPP_TURBO: u32 = 0x77c;
    pub const VDD_CORE_OPP: fn(n: u32) -> u32 = |n| 0x7b8 + (n * 4);
    pub const BB_SCALE: u32 = 0x7d0;
    pub const USB_VID_PID: u32 = 0x7f4;
    pub const EFUSE_SMA: u32 = 0x7fc;
    pub const CONF_GPMC_AD: fn(n: u32) -> u32 = |n| 0x800 + (n * 4);
    pub const CONF_GPMC_A: fn(n: u32) -> u32 = |n| 0x840 + (n * 4);
    pub const CONF_GPMC_WAIT0: u32 = 0x870;
    pub const CONF_GPMC_WPN: u32 = 0x874;
    pub const CONF_GPMC_BE1N: u32 = 0x878;
    pub const CONF_GPMC_CSN: fn(n: u32) -> u32 = |n| 0x87c + (n * 4);
    pub const CONF_GPMC_CLK: u32 = 0x88c;
    pub const CONF_GPMC_ADVN_ALE: u32 = 0x890;
    pub const CONF_GPMC_OEN_REN: u32 = 0x894;
    pub const CONF_GPMC_WEN: u32 = 0x898;
    pub const CONF_GPMC_BE0N_CLE: u32 = 0x89c;
    pub const CONF_LCD_DATA: fn(n: u32) -> u32 = |n| 0x8a0 + (n * 4);
    pub const CONF_LCD_VSYNC: u32 = 0x8e0;
    pub const CONF_LCD_HSYNC: u32 = 0x8e4;
    pub const CONF_LCD_PCLK: u32 = 0x8e8;
    pub const CONF_LCD_AC_BIAS_EN: u32 = 0x8ec;
    pub const CONTROL_CONF_MMC0_DAT3: u32 = 0x8f0;
    pub const CONTROL_CONF_MMC0_DAT2: u32 = 0x8f4;
    pub const CONTROL_CONF_MMC0_DAT1: u32 = 0x8f8;
    pub const CONTROL_CONF_MMC0_DAT0: u32 = 0x8fc;
    pub const CONTROL_CONF_MMC0_CLK: u32 = 0x900;
    pub const CONTROL_CONF_MMC0_CMD: u32 = 0x904;
    pub const CONF_MII1_COL: u32 = 0x908;
    pub const CONF_MII1_CRS: u32 = 0x90c;
    pub const CONF_MII1_RXERR: u32 = 0x910;
    pub const CONF_MII1_TXEN: u32 = 0x914;
    pub const CONF_MII1_RXDV: u32 = 0x918;
    pub const CONF_MII1_TXD3: u32 = 0x91c;
    pub const CONF_MII1_TXD2: u32 = 0x920;
    pub const CONF_MII1_TXD1: u32 = 0x924;
    pub const CONF_MII1_TXD0: u32 = 0x928;
    pub const CONF_MII1_TXCLK: u32 = 0x92c;
    pub const CONF_MII1_RXCLK: u32 = 0x930;
    pub const CONF_MII1_RXD3: u32 = 0x934;
    pub const CONF_MII1_RXD2: u32 = 0x938;
    pub const CONF_MII1_RXD1: u32 = 0x93c;
    pub const CONF_MII1_RXD0: u32 = 0x940;
    pub const CONF_RMII1_REFCLK: u32 = 0x944;
    pub const CONF_MDIO_DATA: u32 = 0x948;
    pub const CONF_MDIO_CLK: u32 = 0x94c;
    pub const CONF_SPI0_SCLK: u32 = 0x950;
    pub const CONF_SPI0_D0: u32 = 0x954;
    pub const CONF_SPI0_D1: u32 = 0x958;
    pub const CONF_SPI0_CS0: u32 = 0x95c;
    pub const CONF_SPI0_CS1: u32 = 0x960;
    pub const CONF_ECAP0_IN_PWM0_OUT: u32 = 0x964;

    /* CONF_MMC0_DAT3 */
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_DAT3_CONF_MMC0_DAT3_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_MMC0_DAT2 */
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_DAT2_CONF_MMC0_DAT2_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_MMC0_DAT1 */
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_DAT1_CONF_MMC0_DAT1_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_MMC0_DAT0 */
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_DAT0_CONF_MMC0_DAT0_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_MMC0_CLK */
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_CLK_CONF_MMC0_CLK_SLEWCTRL_SHIFT: u32 = 0x00000006;

    /* CONF_MMC0_CMD */
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_MMODE: u32 = 0x00000007;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_MMODE_SHIFT: u32 = 0x00000000;

    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_PUDEN: u32 = 0x00000008;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_PUDEN_SHIFT: u32 = 0x00000003;

    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_PUTYPESEL: u32 = 0x00000010;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_PUTYPESEL_SHIFT: u32 = 0x00000004;

    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_RSVD: u32 = 0x000FFF80;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_RSVD_SHIFT: u32 = 0x00000007;

    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_RXACTIVE: u32 = 0x00000020;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_RXACTIVE_SHIFT: u32 = 0x00000005;

    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_SLEWCTRL: u32 = 0x00000040;
    pub const CONTROL_CONF_MMC0_CMD_CONF_MMC0_CMD_SLEWCTRL_SHIFT: u32 = 0x00000006;
}
